{"version":3,"mappings":"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","names":["C","l","n","e","r","c","constructor","t","i","o","this","ngOnInit","_initAsync","isLoading","user","_authService","plans","_paymentService","getExtensionProductsPlansAsync","basicBundlePlan","products","find","platformProductType","monthly","subscriptionRequirmentType","_activatedRouteSnapshot","snapshot","queryParams","reason","userBalance$","pipe","subscribe","userBalance","isOrganizationMember","accountType","m","requirementTitle","requirementDescription","requirementBtnText","hasCancelMessage","a","userSubscription","getExtensionSubscriptionStateAsync","subscriptionRequirementUpgradeAsync","currentPlan","creditsPackage","interval","months","p","yearly","credits","navigateToPayment","planId","decodeURIComponent","P","chrome","tabs","create","url","sendRequestForCreditsToOrganizationOwnerAsync","showRequestSentMessage","sendCreditsRequestToOwnerAsync","selectors","u","M","S","path","component","g","h","d","x","y","b"],"sources":["./ngx-common/models/pricing.model.ts","./projects/browser-extension/src/app/pages/extension-subscription-requirement-modes/extension-subscription-requirement-modes.component.html","./projects/browser-extension/src/app/pages/extension-subscription-requirement-modes/extension-subscription-requirement-modes.component.ts","./projects/browser-extension/src/app/pages/extension-subscription-requirement-modes/extension-subscription-requirement-modes-routing.module.ts","./projects/browser-extension/src/app/pages/extension-subscription-requirement-modes/extension-subscription-requirement-modes.module.ts"],"sourcesContent":["import { IAccountBillingAddressValue } from '../components/billing-address/models/billing-address.models';\r\n\r\nexport class PricingPlan {\r\n\tid: string;\r\n\tcredits: number;\r\n\tprice: number;\r\n\tplatformProduct?: EPlatformProductType;\r\n\tinterval: {\r\n\t\tmonths: number;\r\n\t\tdays: number;\r\n\t};\r\n}\r\nexport class PricingOffer {\r\n\tplanId: string;\r\n\tcoupon?: string;\r\n\tbillingAddress: IAccountBillingAddressValue;\r\n\tcode?: string; // obsolete\r\n}\r\nexport class PricingOfferResult {\r\n\titemsPrice: number;\r\n\tcouponDiscount: number;\r\n\tvat: number;\r\n\ttotalPrice: number;\r\n}\r\nexport class PricingRecommendation {\r\n\tamount: number;\r\n\tprice: number;\r\n\tpricePlusTax: number;\r\n\tplanId: string;\r\n\tshouldPayTax: boolean;\r\n}\r\nexport class PlansPricingResult {\r\n\tplans: PricingPlanResult[];\r\n}\r\n\r\nexport class SupportPlansPricingResult {\r\n\tplans: SupportPricingPlanItemResultItem[];\r\n}\r\n\r\nexport class IPlatformProductsPlans {\r\n\tproducts: IProductPlans[];\r\n}\r\nexport class IProductPlans {\r\n\tname: string;\r\n\tplatformProductType: EPlatformProductType;\r\n\tplans: PricingPlanResult[];\r\n}\r\nexport class PricingPlanResult {\r\n\tcredits: number;\r\n\tmonthly: PricingPlanItemResultItem;\r\n\tyearly: PricingPlanItemResultItem;\r\n\thighAvailability?: boolean;\r\n}\r\n\r\nexport class PricingPlanItemResultItem {\r\n\tplanId: string;\r\n\tcredits: number;\r\n\tprice: number;\r\n\ttotalPrice: number;\r\n\ttotalPriceAfterDiscount: number;\r\n\tvat: number;\r\n}\r\n\r\nexport class SupportPricingPlanItemResultItem {\r\n\tplanId: string;\r\n\tprice: number;\r\n\ttotalPrice: number;\r\n\ttotalPriceAfterDiscount: number;\r\n\tvat: number;\r\n}\r\n\r\nexport enum EPaymentServiceSteps {\r\n\tUpdatePaymentMethod,\r\n\tProcessing,\r\n\tGettingCredits,\r\n\tCompleted,\r\n\tCreatingRepository,\r\n\tUpdatingRepository,\r\n}\r\n\r\nexport enum EPlatformProductType {\r\n\tAIDetector = 1,\r\n\tPlagiarismChecker = 2,\r\n\tBundled = 3,\r\n}\r\n","<div class=\"main-container\">\r\n\t<!-- The extension header which includes the user menu, the copyleaks logo, etc. -->\r\n\t<app-ext-header [user]=\"user\" [isOrganizationMember]=\"isOrganizationMember\"></app-ext-header>\r\n\r\n\t<!-- Message for payment requirement -->\r\n\t<div *ngIf=\"!isLoading\" class=\"limit-reached-message-container\">\r\n\t\t<div class=\"message-content\">\r\n\t\t\t<h2 class=\"title\" subscriptionRequirementTitle>{{ requirementTitle }}</h2>\r\n\t\t\t<span class=\"description\" subscriptionRequirementDescription>{{ requirementDescription }}</span>\r\n\t\t</div>\r\n\t\t<div class=\"message-actions\">\r\n\t\t\t<button\r\n\t\t\t\t*ngIf=\"!showRequestSentMessage\"\r\n\t\t\t\t(click)=\"\r\n\t\t\t\t\tisOrganizationMember ? sendRequestForCreditsToOrganizationOwnerAsync() : subscriptionRequirementUpgradeAsync()\r\n\t\t\t\t\"\r\n\t\t\t\tclass=\"upgrade-btn\"\r\n\t\t\t\tripple>\r\n\t\t\t\t<img *ngIf=\"!isOrganizationMember\" src=\"assets/icons/crown-icon.svg\" />\r\n\t\t\t\t<span class=\"submit-btn-text\" submitBtnText>{{ requirementBtnText }}</span>\r\n\t\t\t</button>\r\n\t\t\t<div *ngIf=\"showRequestSentMessage\" class=\"request-sent-message\">\r\n\t\t\t\t<img src=\"assets/icons/check-mark-icon-grey.svg\" />\r\n\t\t\t\t<span>Your request was sent</span>\r\n\t\t\t</div>\r\n\t\t\t<span class=\"cancel-msg\" *ngIf=\"hasCancelMessage\">Cancel anytime</span>\r\n\t\t</div>\r\n\t</div>\r\n\r\n\t<!-- Loading spinner -->\r\n\t<div *ngIf=\"isLoading\" class=\"loading-container\">\r\n\t\t<cls-spinner width=\"100px\"></cls-spinner>\r\n\t</div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\r\nimport { EPaymentPlanType } from '@ngx-common/enums/payment-plan-type.enum';\r\nimport {\r\n\tEPlatformProductType,\r\n\tIPlatformProductsPlans,\r\n\tPricingPlanItemResultItem,\r\n} from '@ngx-common/models/pricing.model';\r\nimport { IUserBalance } from '@ngx-common/models/user-balance.models';\r\nimport { IExtUser } from '@shared/interfaces';\r\nimport { environment } from 'projects/browser-extension/src/environments/environment';\r\nimport { ExtAuthService } from '../../services/ext-auth.service';\r\nimport { ExtPaymentService } from '../../services/ext-payment.service';\r\nimport { EAiSubscriptionRequirementTypes } from '../../enums/subscription-requirment-types.enum';\r\nimport { IExtUserSubscriptionState } from '@ngx-common/models/ext-payment.model';\r\n\r\n@UntilDestroy()\r\n@Component({\r\n\tselector: 'app-extension-subscription-requirement-modes',\r\n\ttemplateUrl: './extension-subscription-requirement-modes.component.html',\r\n\tstyleUrls: ['./extension-subscription-requirement-modes.component.scss'],\r\n})\r\nexport class ExtensionSubscriptionRequirementModesComponent implements OnInit {\r\n\t//Strongly typed variables\r\n\tuser: IExtUser;\r\n\tplans: IPlatformProductsPlans;\r\n\tsubscriptionRequirmentType: EAiSubscriptionRequirementTypes;\r\n\tbasicBundlePlan: PricingPlanItemResultItem;\r\n\tuserBalance: IUserBalance;\r\n\tuserSubscription: IExtUserSubscriptionState;\r\n\r\n\t// boolean/string variables\r\n\trequirementTitle: string = '';\r\n\trequirementDescription: string = '';\r\n\trequirementBtnText: string = '';\r\n\thasCancelMessage: boolean = false;\r\n\tisOrganizationMember: boolean = false;\r\n\tisLoading: boolean = false;\r\n\tisRedirecting: boolean = false;\r\n\tshowRequestSentMessage: boolean = false;\r\n\r\n\tconstructor(\r\n\t\tprivate _paymentService: ExtPaymentService,\r\n\t\tprivate _activatedRouteSnapshot: ActivatedRoute,\r\n\t\tprivate _authService: ExtAuthService\r\n\t) {}\r\n\r\n\tngOnInit() {\r\n\t\tthis._initAsync();\r\n\t}\r\n\r\n\t// component initializer\r\n\tprivate async _initAsync() {\r\n\t\tthis.isLoading = true;\r\n\t\tthis.user = this._authService.user;\r\n\t\tthis.plans = await this._paymentService.getExtensionProductsPlansAsync();\r\n\t\tthis.basicBundlePlan = this.plans.products.find(\r\n\t\t\tproduct => product.platformProductType == EPlatformProductType.Bundled\r\n\t\t).plans[0].monthly;\r\n\t\tthis.subscriptionRequirmentType = this._activatedRouteSnapshot?.snapshot?.queryParams?.reason;\r\n\t\tthis._paymentService.userBalance$.pipe(untilDestroyed(this)).subscribe(async balance => {\r\n\t\t\tthis.userBalance = balance;\r\n\t\t\tthis.isOrganizationMember = this.userBalance.accountType == EPaymentPlanType.SharedAccount;\r\n\t\t\tif (!this.isOrganizationMember) {\r\n\t\t\t\tswitch (this.subscriptionRequirmentType) {\r\n\t\t\t\t\tcase EAiSubscriptionRequirementTypes.RateLimit:\r\n\t\t\t\t\t\tthis.requirementTitle = 'You’ve reached your daily limit.';\r\n\t\t\t\t\t\tthis.requirementDescription = 'Upgrade today for additional access.';\r\n\t\t\t\t\t\tthis.requirementBtnText = 'Upgrade';\r\n\t\t\t\t\t\tthis.hasCancelMessage = false;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase EAiSubscriptionRequirementTypes.OutOfCredits:\r\n\t\t\t\t\t\tthis.requirementTitle = 'More credits needed to complete scan.';\r\n\t\t\t\t\t\tthis.requirementDescription =\r\n\t\t\t\t\t\t\t'Refill your credits by clicking below. Please note, this will restart your billing cycle.';\r\n\t\t\t\t\t\tthis.requirementBtnText = 'Purchase credits';\r\n\t\t\t\t\t\tthis.hasCancelMessage = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase EAiSubscriptionRequirementTypes.AiSubscriptionMissing:\r\n\t\t\t\t\t\tthis.requirementTitle = 'Upgrade to AI Content Detector';\r\n\t\t\t\t\t\tthis.requirementDescription = 'Add our award-winning AI Content Detector to your subscription today.';\r\n\t\t\t\t\t\tthis.requirementBtnText = 'Upgrade Plan';\r\n\t\t\t\t\t\tthis.hasCancelMessage = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.requirementTitle = 'You don’t have enough credits to complete this scan.';\r\n\t\t\t\tthis.requirementDescription = 'Ask your admin to provide you with more credits.';\r\n\t\t\t\tthis.requirementBtnText = 'Send request';\r\n\t\t\t\tthis.hasCancelMessage = false;\r\n\t\t\t}\r\n\t\t\tif (this.userBalance.accountType == EPaymentPlanType.Subscription) {\r\n\t\t\t\tthis.userSubscription = await this._paymentService.getExtensionSubscriptionStateAsync();\r\n\t\t\t}\r\n\t\t\tthis.isLoading = false;\r\n\t\t});\r\n\t}\r\n\r\n\t// Handles redirecting the user to payment after the user used all his credits or reached rate limit for the day.\r\n\tasync subscriptionRequirementUpgradeAsync() {\r\n\t\tif (this.subscriptionRequirmentType == EAiSubscriptionRequirementTypes.AiSubscriptionMissing) {\r\n\t\t\tlet userPlanCredits = this.userSubscription.currentPlan.creditsPackage;\r\n\t\t\tlet isUserPlanYearly = this.userSubscription.currentPlan.interval.months == 12;\r\n\t\t\tlet bundlePricingPlanResultRelevantForUser = this.plans.products\r\n\t\t\t\t.find(product => product.platformProductType == EPlatformProductType.Bundled)\r\n\t\t\t\t.plans.find(plan =>\r\n\t\t\t\t\tisUserPlanYearly ? plan.yearly.credits == userPlanCredits : plan.monthly.credits == userPlanCredits\r\n\t\t\t\t);\r\n\t\t\tlet relevantBundlePlan = isUserPlanYearly\r\n\t\t\t\t? bundlePricingPlanResultRelevantForUser.yearly\r\n\t\t\t\t: bundlePricingPlanResultRelevantForUser.monthly;\r\n\t\t\tthis.navigateToPayment(relevantBundlePlan.planId, EPlatformProductType.Bundled);\r\n\t\t} else if (\r\n\t\t\tthis.subscriptionRequirmentType == EAiSubscriptionRequirementTypes.RateLimit ||\r\n\t\t\t(this.subscriptionRequirmentType == EAiSubscriptionRequirementTypes.OutOfCredits &&\r\n\t\t\t\tthis.userBalance.accountType == EPaymentPlanType.Prepaid)\r\n\t\t) {\r\n\t\t\tthis.navigateToPayment(this.basicBundlePlan.planId, EPlatformProductType.Bundled);\r\n\t\t} else if (\r\n\t\t\tthis.subscriptionRequirmentType == EAiSubscriptionRequirementTypes.OutOfCredits &&\r\n\t\t\tthis.userBalance.accountType == EPaymentPlanType.Subscription\r\n\t\t) {\r\n\t\t\tlet currentUserPlan = this.userSubscription.currentPlan;\r\n\t\t\tthis.navigateToPayment(currentUserPlan.planId, currentUserPlan.platformProductType);\r\n\t\t}\r\n\t}\r\n\r\n\tasync navigateToPayment(planId: string, platformProductType: EPlatformProductType) {\r\n\t\tconst successRedirect = decodeURIComponent(`${environment.mainWebsite}/ai-content-detector-extension-thank-you`);\r\n\t\tlet tabURl = `${environment.dashboardWebsite}/payment/checkout?planId=${planId}&ePlatformProductType=${platformProductType}&redirectUrl=${successRedirect}`;\r\n\t\tchrome.tabs.create({ url: tabURl });\r\n\t}\r\n\r\n\tasync sendRequestForCreditsToOrganizationOwnerAsync() {\r\n\t\tthis.showRequestSentMessage = true;\r\n\t\tawait this._paymentService.sendCreditsRequestToOwnerAsync();\r\n\t}\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ExtensionSubscriptionRequirementModesComponent } from './extension-subscription-requirement-modes.component';\r\n\r\nconst routes: Routes = [\r\n\t{\r\n\t\tpath: '',\r\n\t\tcomponent: ExtensionSubscriptionRequirementModesComponent,\r\n\t},\r\n];\r\n\r\n@NgModule({\r\n\timports: [RouterModule.forChild(routes)],\r\n\texports: [RouterModule],\r\n})\r\nexport class ExtensionSubscriptionRequirementModesRoutingModule {}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { SpinnerModule } from '@ngx-common/components/spinner/spinner.module';\r\nimport { ExtHeaderModule } from '../../components/ext-header/ext-header.module';\r\nimport { ExtensionSubscriptionRequirementModesRoutingModule } from './extension-subscription-requirement-modes-routing.module';\r\nimport { ExtensionSubscriptionRequirementModesComponent } from './extension-subscription-requirement-modes.component';\r\n\r\n@NgModule({\r\n\tdeclarations: [ExtensionSubscriptionRequirementModesComponent],\r\n\timports: [CommonModule, ExtensionSubscriptionRequirementModesRoutingModule, ExtHeaderModule, SpinnerModule],\r\n})\r\nexport class ExtensionSubscriptionRequirementModesModule {}\r\n"],"sourceRoot":"webpack:///","file":"common.js"}