{"version":3,"mappings":"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","names":["constructor","this","ngOnInit","e","selectors","o","u","AIScan","User","RateLimit","c","v","user","_user","isLoggedIn","initCurrentUserTokenAsync","_http","get","toPromise","p","chrome","storage","sync","set","getUserAsync","logoutAsync","clear","_router","navigate","replaceUrl","m","i","factory","production","extensionAPI","dashboardWebsite","mainWebsite","identityWebsite","n","canActivate","s","l","canActivateChild","g","path","loadChildren","t","then","r","DebuggingHelperModule","Promise","ScanPageModule","ExtensionSubscriptionRequirementModesModule","ErrorPageModule","LoginPageModule","f","O","_initAsync","_authService","d","setTimeout","isExtensionLoading","E","ReadOnlyReport","intercept","clone","setHeaders","Authorization","token","handle","y","pipe","status","_zone","run","queryParams","hideBottomMessage","errormsg","reason","U","A","_","bootstrap","provide","useClass","multi","imports","M","N","bootstrapModule","catch","console","error"],"sources":["./ngx-common/components/spinner/spinner.component.ts","./ngx-common/components/spinner/spinner.component.html","./ngx-common/components/spinner/spinner.module.ts","./projects/browser-extension/src/app/enums/pages-path.enum.ts","./projects/browser-extension/src/app/enums/storage-keys.enum.ts","./projects/browser-extension/src/app/enums/subscription-requirment-types.enum.ts","./projects/browser-extension/src/app/services/ext-auth.service.ts","./projects/browser-extension/src/environments/environment.production.ts","./projects/browser-extension/src/app/guards/anonymous-user.guard.ts","./projects/browser-extension/src/app/guards/auth-user.guard.ts","./projects/browser-extension/src/app/app-routing.module.ts","./projects/browser-extension/src/app/interceptor/token.interceptor.ts","./projects/browser-extension/src/app/app.component.html","./projects/browser-extension/src/app/app.component.ts","./projects/browser-extension/src/app/interceptor/status-codes.interceptor.ts","./projects/browser-extension/src/app/app.module.ts","./projects/browser-extension/src/main.ts"],"sourcesContent":["import { Component, OnInit, Input } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'cls-spinner',\r\n\ttemplateUrl: './spinner.component.html',\r\n\tstyleUrls: ['./spinner.component.scss'],\r\n})\r\nexport class SpinnerComponent implements OnInit {\r\n\t@Input() width = '100px';\r\n\t@Input() color = '#17a1ff';\r\n\tconstructor() {}\r\n\r\n\tngOnInit() {}\r\n}\r\n","<div class=\"showbox\">\r\n\t<div class=\"loader\" [style.width]=\"width\">\r\n\t\t<svg class=\"circular\" viewBox=\"25 25 50 50\">\r\n\t\t\t<circle\r\n\t\t\t\tclass=\"path\"\r\n\t\t\t\tcx=\"50\"\r\n\t\t\t\tcy=\"50\"\r\n\t\t\t\t[style.stroke]=\"color\"\r\n\t\t\t\tr=\"20\"\r\n\t\t\t\tfill=\"none\"\r\n\t\t\t\tstroke-width=\"2\"\r\n\t\t\t\tstroke-miterlimit=\"10\" />\r\n\t\t</svg>\r\n\t</div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SpinnerComponent } from './spinner.component';\r\n\r\n@NgModule({\r\n\timports: [CommonModule],\r\n\tdeclarations: [SpinnerComponent],\r\n\texports: [SpinnerComponent],\r\n})\r\nexport class SpinnerModule {}\r\n","export enum EPagesPath {\r\n\tAIScan = 'ai-scan',\r\n\tLogin = 'login',\r\n\tError = 'error',\r\n\tExtSubscriptionRequirement = 'subscription-requirement',\r\n}\r\n","export enum EXSyncStorageKeys {\r\n\tUser = 'user',\r\n}\r\n","export enum EAiSubscriptionRequirementTypes {\r\n\tRateLimit = 'rate-limit',\r\n\tAiSubscriptionMissing = 'ai-detection-disabled',\r\n\tOutOfCredits = 'out-of-credits',\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { IExtUser } from '@shared/interfaces';\r\nimport { environment } from '../../environments/environment';\r\nimport { EPagesPath } from '../enums/pages-path.enum';\r\nimport { EXSyncStorageKeys } from '../enums/storage-keys.enum';\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root',\r\n})\r\nexport class ExtAuthService {\r\n\tprivate _user: IExtUser;\r\n\r\n\tget user() {\r\n\t\treturn this._user;\r\n\t}\r\n\r\n\tconstructor(private _router: Router, private _http: HttpClient) {}\r\n\r\n\tisLoggedIn() {\r\n\t\treturn !!this._user;\r\n\t}\r\n\r\n\tasync initCurrentUserTokenAsync() {\r\n\t\tvar authResult = await this._http.get<IExtUser>(`${environment.extensionAPI}/auth`).toPromise();\r\n\t\tvar storageData = {};\r\n\t\tthis._user = authResult;\r\n\t\tstorageData[EXSyncStorageKeys.User] = authResult;\r\n\t\tawait chrome.storage.sync.set(storageData);\r\n\t}\r\n\r\n\tasync getUserAsync() {\r\n\t\tif (this._user) return this._user;\r\n\t\tconst storageResult = await chrome.storage.sync.get(EXSyncStorageKeys.User);\r\n\t\tthis._user = storageResult.user;\r\n\t\treturn this._user;\r\n\t}\r\n\r\n\tasync logoutAsync() {\r\n\t\tthis._user = null;\r\n\t\tawait chrome.storage.sync.clear();\r\n\t\tthis._router.navigate(['/' + EPagesPath.Login], { replaceUrl: true });\r\n\t}\r\n}\r\n","export const environment = {\r\n\tproduction: true,\r\n\textensionAPI: 'https://app.copyleaks.com/api/browser-extension',\r\n\tdashboardWebsite: 'https://app.copyleaks.com',\r\n\tmainWebsite: 'https://copyleaks.com',\r\n\tidentityWebsite: 'https://id.copyleaks.com',\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n\tActivatedRouteSnapshot,\r\n\tCanActivate,\r\n\tCanActivateChild,\r\n\tRouter,\r\n\tRouterStateSnapshot,\r\n\tUrlTree,\r\n} from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { EPagesPath } from '../enums/pages-path.enum';\r\nimport { EXSyncStorageKeys } from '../enums/storage-keys.enum';\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root',\r\n})\r\nexport class AnonymousUserGuard implements CanActivate, CanActivateChild {\r\n\tconstructor(private _router: Router) {}\r\n\tasync canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n\t\tvar storageResult = await chrome.storage.sync.get(EXSyncStorageKeys.User);\r\n\t\tif (storageResult[EXSyncStorageKeys.User]) {\r\n\t\t\tthis._router.navigate(['/' + EPagesPath.AIScan], { replaceUrl: true });\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tcanActivateChild(\r\n\t\tchildRoute: ActivatedRouteSnapshot,\r\n\t\tstate: RouterStateSnapshot\r\n\t): boolean | UrlTree | Observable<boolean | UrlTree> | Promise<boolean | UrlTree> {\r\n\t\treturn this.canActivate(childRoute, state);\r\n\t}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n\tActivatedRouteSnapshot,\r\n\tCanActivate,\r\n\tCanActivateChild,\r\n\tRouter,\r\n\tRouterStateSnapshot,\r\n\tUrlTree,\r\n} from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { EPagesPath } from '../enums/pages-path.enum';\r\nimport { EXSyncStorageKeys } from '../enums/storage-keys.enum';\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root',\r\n})\r\nexport class AuthUserGuard implements CanActivate, CanActivateChild {\r\n\tconstructor(private _router: Router) {}\r\n\tasync canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n\t\tvar storageResult = await chrome.storage.sync.get(EXSyncStorageKeys.User);\r\n\t\tif (storageResult[EXSyncStorageKeys.User]) return true;\r\n\r\n\t\tthis._router.navigate(['/' + EPagesPath.Login], { replaceUrl: true });\r\n\t\treturn false;\r\n\t}\r\n\tcanActivateChild(\r\n\t\tchildRoute: ActivatedRouteSnapshot,\r\n\t\tstate: RouterStateSnapshot\r\n\t): boolean | UrlTree | Observable<boolean | UrlTree> | Promise<boolean | UrlTree> {\r\n\t\treturn this.canActivate(childRoute, state);\r\n\t}\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { EPagesPath } from './enums/pages-path.enum';\r\nimport { AnonymousUserGuard } from './guards/anonymous-user.guard';\r\nimport { AuthUserGuard } from './guards/auth-user.guard';\r\n\r\nconst routes: Routes = [\r\n\t{\r\n\t\tpath: 'debugging',\r\n\t\tloadChildren: () =>\r\n\t\t\timport('./pages/debugging-helper/debugging-helper.module').then(mod => mod.DebuggingHelperModule),\r\n\t},\r\n\t{\r\n\t\tpath: EPagesPath.AIScan,\r\n\t\tloadChildren: () => import('./pages/scan-page/scan-page.module').then(mod => mod.ScanPageModule),\r\n\t\tcanActivate: [AuthUserGuard],\r\n\t},\r\n\t{\r\n\t\tpath: EPagesPath.ExtSubscriptionRequirement,\r\n\t\tloadChildren: () =>\r\n\t\t\timport('./pages/extension-subscription-requirement-modes/extension-subscription-requirement-modes.module').then(\r\n\t\t\t\tmod => mod.ExtensionSubscriptionRequirementModesModule\r\n\t\t\t),\r\n\t\tcanActivate: [AuthUserGuard],\r\n\t},\r\n\t{\r\n\t\tpath: EPagesPath.Error,\r\n\t\tloadChildren: () => import('./pages/error-page/error-page.module').then(mod => mod.ErrorPageModule),\r\n\t},\r\n\t{\r\n\t\tpath: EPagesPath.Login,\r\n\t\tloadChildren: () => import('./pages/login-page/login-page.module').then(mod => mod.LoginPageModule),\r\n\t\tcanActivate: [AnonymousUserGuard],\r\n\t},\r\n];\r\n\r\n@NgModule({\r\n\timports: [RouterModule.forRoot(routes)],\r\n\texports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {}\r\n","import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ExtAuthService } from '../services/ext-auth.service';\r\n\r\nexport enum EAuthenticationHeaders {\r\n\tReadOnlyReport = 'read-only-report',\r\n}\r\n\r\n@Injectable()\r\nexport class TokenInterceptor implements HttpInterceptor {\r\n\tconstructor(private _authService: ExtAuthService) {}\r\n\r\n\tintercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\t\tif (this._authService.isLoggedIn()) {\r\n\t\t\t// add authorization header with reference token if available\r\n\t\t\trequest = request.clone({\r\n\t\t\t\tsetHeaders: {\r\n\t\t\t\t\tAuthorization: `Bearer ${this._authService.user.token}`,\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn next.handle(request);\r\n\t}\r\n}\r\n","<div [style.display]=\"isExtensionLoading ? 'none' : 'block'\">\r\n\t<router-outlet></router-outlet>\r\n</div>\r\n\r\n<ng-container *ngIf=\"isExtensionLoading\">\r\n\t<div class=\"ext-loader-contianer\">\r\n\t\t<cls-spinner></cls-spinner>\r\n\t</div>\r\n</ng-container>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { EPagesPath } from './enums/pages-path.enum';\r\nimport { ExtAuthService } from './services/ext-auth.service';\r\n\r\n@Component({\r\n\tselector: 'app-root',\r\n\ttemplateUrl: './app.component.html',\r\n\tstyleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent implements OnInit {\r\n\tisExtensionLoading = true;\r\n\tconstructor(private _router: Router, private _authService: ExtAuthService) {}\r\n\r\n\tngOnInit() {\r\n\t\tthis._initAsync();\r\n\t}\r\n\r\n\tprivate async _initAsync() {\r\n\t\tlet loaderTimeout = 0;\r\n\t\ttry {\r\n\t\t\tvar user = await this._authService.getUserAsync();\r\n\t\t\tif (!user) {\r\n\t\t\t\tloaderTimeout = 100;\r\n\t\t\t\tawait this._authService.initCurrentUserTokenAsync();\r\n\t\t\t}\r\n\t\t\tawait this._router.navigate(['/' + EPagesPath.Login]); //if user already loggedin he will automaticly be redirected to the default page.\r\n\t\t} catch (error) {\r\n\t\t\tawait this._router.navigate(['/' + EPagesPath.Login]);\r\n\t\t} finally {\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tthis.isExtensionLoading = false;\r\n\t\t\t}, loaderTimeout);\r\n\t\t}\r\n\t}\r\n}\r\n","import { HttpHandler, HttpInterceptor, HttpRequest, HttpStatusCode } from '@angular/common/http';\r\nimport { Injectable, NgZone } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { tap } from 'rxjs/operators';\r\nimport { EPagesPath } from '../enums/pages-path.enum';\r\nimport { ExtAuthService } from '../services/ext-auth.service';\r\nimport { EAiSubscriptionRequirementTypes } from '../enums/subscription-requirment-types.enum';\r\n\r\n// interceptor\r\n@Injectable()\r\nexport class StatusCodesInterceptor implements HttpInterceptor {\r\n\tconstructor(private _authService: ExtAuthService, private _router: Router, private _zone: NgZone) {}\r\n\tintercept(req: HttpRequest<any>, next: HttpHandler) {\r\n\t\treturn next.handle(req).pipe(\r\n\t\t\ttap(\r\n\t\t\t\t() => {},\r\n\t\t\t\terror => {\r\n\t\t\t\t\tif (error.status === HttpStatusCode.Unauthorized) {\r\n\t\t\t\t\t\tthis._authService.logoutAsync();\r\n\t\t\t\t\t} else if (error.status === HttpStatusCode.ServiceUnavailable) {\r\n\t\t\t\t\t\tthis._zone.run(() => {\r\n\t\t\t\t\t\t\tthis._router.navigate(['/' + EPagesPath.Error], {\r\n\t\t\t\t\t\t\t\treplaceUrl: true,\r\n\t\t\t\t\t\t\t\tqueryParams: {\r\n\t\t\t\t\t\t\t\t\thideBottomMessage: true,\r\n\t\t\t\t\t\t\t\t\terrormsg: 'Site is under maintenance',\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else if (error.status === HttpStatusCode.MethodNotAllowed || error.status > 500) {\r\n\t\t\t\t\t\tthis._zone.run(() => {\r\n\t\t\t\t\t\t\tthis._router.navigate(['/' + EPagesPath.Error], {\r\n\t\t\t\t\t\t\t\treplaceUrl: true,\r\n\t\t\t\t\t\t\t\tqueryParams: {\r\n\t\t\t\t\t\t\t\t\terrormsg: 'something went wrong, please try again later',\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else if (error.status === HttpStatusCode.TooManyRequests) {\r\n\t\t\t\t\t\tthis._zone.run(() => {\r\n\t\t\t\t\t\t\tthis._router.navigate(['/' + EPagesPath.ExtSubscriptionRequirement], {\r\n\t\t\t\t\t\t\t\treplaceUrl: true,\r\n\t\t\t\t\t\t\t\tqueryParams: {\r\n\t\t\t\t\t\t\t\t\treason: EAiSubscriptionRequirementTypes.RateLimit,\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else if (error.status == HttpStatusCode.PaymentRequired) {\r\n\t\t\t\t\t\tthis._zone.run(() => {\r\n\t\t\t\t\t\t\tthis._router.navigate(['/' + EPagesPath.ExtSubscriptionRequirement], {\r\n\t\t\t\t\t\t\t\treplaceUrl: true,\r\n\t\t\t\t\t\t\t\tqueryParams: {\r\n\t\t\t\t\t\t\t\t\treason: EAiSubscriptionRequirementTypes.OutOfCredits,\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n}\r\n","import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { SpinnerModule } from '@ngx-common/components/spinner/spinner.module';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { TokenInterceptor } from './interceptor/token.interceptor';\r\nimport { StatusCodesInterceptor } from './interceptor/status-codes.interceptor';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@NgModule({\r\n\tdeclarations: [AppComponent],\r\n\timports: [CommonModule, BrowserModule, AppRoutingModule, HttpClientModule, SpinnerModule],\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: HTTP_INTERCEPTORS,\r\n\t\t\tuseClass: StatusCodesInterceptor,\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: HTTP_INTERCEPTORS,\r\n\t\t\tuseClass: TokenInterceptor,\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t],\r\n\tbootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n\tenableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic()\r\n\t.bootstrapModule(AppModule)\r\n\t.catch(err => console.error(err));\r\n"],"sourceRoot":"webpack:///","file":"main.js"}